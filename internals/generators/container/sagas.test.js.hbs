import { fromJS } from 'immutable';
import { expectSaga } from 'redux-saga-test-plan';
import { throwError } from 'redux-saga-test-plan/providers';
import * as matchers from 'redux-saga-test-plan/matchers';
import * as api from 'utils/request';

import * as {{ constantCase name }} from '../constants';
import * as {{ camelCase name }}Actions from '../actions';

import watcher, {
  handle{{ properCase sagaName }}Request,
} from '../sagas';

// Sagas
describe('handle{{ properCase sagaName }}Request Saga', () => {
  const {{ camelCase selectorName }} = 'the-{{ camelCase selectorName }}';
  const state = fromJS({
    {{ camelCase name }}: {
      {{ camelCase selectorName }},
    },
  });

  // eslint-disable-next-line arrow-body-style
  it('should listen {{ constantCase sagaName }}_REQUEST in the watcher', () => {
    return expectSaga(watcher)
      .take({{ constantCase name }}.{{ constantCase sagaName }}_REQUEST)
      .silentRun();
  });

  it('should dispatch the {{ camelCase sagaName }}Success action if it requests the credential successfully', () => {
    const response = {
      message: 'ok',
      payload: 'value',
    };

    return expectSaga(handle{{ properCase sagaName }}Request, api)
      .withState(state)
      .call(api.POST, '/{{ camelCase sagaName }}', undefined, {{ camelCase selectorName }})
      .provide([
        [matchers.call(api.POST, '/{{ camelCase sagaName }}', undefined, {{ camelCase selectorName }}), response],
      ])
      .put({{ camelCase name }}Actions.{{ camelCase sagaName }}Success(response))
      .run();
  });

  it('should call the {{ camelCase sagaName }}Failure action if the response errors', () => {
    const error = new Error('value');

    return expectSaga(handle{{ properCase sagaName }}Request, api)
      .withState(state)
      .call(api.POST, '/{{ camelCase sagaName }}', undefined, {{ camelCase selectorName }})
      .provide([
        [matchers.call(api.POST, '/{{ camelCase sagaName }}', undefined, {{ camelCase selectorName }}), throwError(error)],
      ])
      .put({{ camelCase name }}Actions.{{ camelCase sagaName }}Failure(error))
      .run();
  });
});

// Watcher
describe('watcher', () => {
  // eslint-disable-next-line arrow-body-style
  it('should forward {{ camelCase actionName }} to {{ camelCase sagaName }}Request', () => {
    return expectSaga(watcher)
      .provide([
        [matchers.put({{ camelCase name }}Actions.{{ camelCase sagaName }}Request())],
      ])
      .dispatch({{ camelCase name }}Actions.{{ camelCase actionName }}())
      .silentRun();
  });
});
