version: "2.3"
services:

  nginx:
    image: nginx
    container_name: nginx
    restart: always
    ports:
     - "80:80"
     - "443:443"
     - "8889:80"
     - "4343:443"
    volumes:
     - /etc/nginx/conf.d
     - /root/ballot:/etc/nginx/certs
     - /root/ballot/dhparam.pem:/etc/nginx/dhparam/dhparam.pem
    networks:
      - prod

  dockergen:
    image: jwilder/docker-gen
    restart: always
    environment:
      DEFAULT_HOST: ballot-api.b1f6c1c4.info
    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes_from:
     - nginx
    volumes:
     - /root/ballot:/etc/nginx/certs
     - /root/ballot/dhparam.pem:/etc/nginx/dhparam/dhparam.pem
     - /var/run/docker.sock:/tmp/docker.sock:ro
     - /root/ballot/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl
    networks:
      - prod

  backend:
    image: b1f6c1c4/ballot-backend
    restart: always
    environment:
      VIRTUAL_HOST: ballot-api.b1f6c1c4.info
      VIRTUAL_PORT: 3000
      HTTPS_METHOD: redirect
      CORS_ORIGIN: "https://ballot.b1f6c1c4.info"
      BACKEND_LOG: "${DEBUG_LEVEL}"
      JWT_SECRET: "${JWT_SECRET}"
      NO_SHARD: 'true'
      ANONY_NO_STRICT: 'true'
      MONGO_HOST: mongo
      REDIS_HOST: redis
      RABBIT_HOST: rabbit
      RABBIT_USER: guest
      RABBIT_PASS: guest
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    networks:
      - prod
    links:
      - mongo
      - redis
      - rabbit

  cryptor:
    image: b1f6c1c4/ballot-cryptor
    restart: always
    entrypoint: ["./cryptor", "-w", "2048", "-s", "cryptor", "-v", "${DEBUG_LEVEL}"]
    environment:
      RABBIT_HOST: rabbit
      RABBIT_USER: guest
      RABBIT_PASS: guest
    depends_on:
      rabbit:
        condition: service_healthy
    networks:
      - prod
    links:
      - rabbit

  mongo:
    image: mongo
    restart: always
    volumes:
      - /data/ballot/mongo:/data/db
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.stats().ok' | mongo localhost:27017/ballot --quiet"]
      interval: 15s
      timeout: 10s
      retries: 2
    networks:
      - prod

  redis:
    image: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "INFO"]
      interval: 15s
      timeout: 10s
      retries: 2
    networks:
      - prod

networks:
  prod:
    driver: bridge
